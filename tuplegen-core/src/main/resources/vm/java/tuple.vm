package $model.getPackageName();

import java.io.Serializable;
import java.util.Iterator;
#if ($model.getSourceVersion() >= 1.7)
import java.util.Objects;
#else
import java.util.Arrays;
#end
import javax.annotation.Generated;

/**
 * An immutable #if ($model.isGeneric())generic#{else}user defined#end ${model.getTupleLength()}-tuple
 */
#if ($model.getTupleLength() == 1)
#set ($rangeExcludingFirst = [])
#else
#set ($rangeExcludingFirst = [2..$model.getTupleLength()])
#end
#macro(args)
$model.getElementType(1) $model.getElementName(1)#foreach ($i in $rangeExcludingFirst), $model.getElementType($i) $model.getElementName($i)#end
#end
#macro(types)
#if ($model.isGeneric())<$model.getElementType(1)#foreach ($i in $rangeExcludingFirst), $model.getElementType($i)#end>#end
#end
#macro(attrs)
$model.getElementName(1)#foreach ($i in $rangeExcludingFirst), $model.getElementName($i)#end
#end
#set ($className = $util.upperCaseFirstChar($model.getTupleName()))
@Generated("tuplegen")
public class $className#types implements Serializable, Iterable<Object> {

#set ($iteratorClassName = "${className}Iterator")
    private class $iteratorClassName implements Iterator<Object> {

        private int ordinal = 1;

        @Override
        public boolean hasNext() {
            return ordinal <= $model.getTupleLength();
        }

        @Override
        public Object next() {
            switch (ordinal++) {
#foreach ($i in [1..$model.getTupleLength()])
                case $i: return $model.getElementName($i);
#end
                default: throw new InternalError();
            }
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException("Cannot remove a tuple element");
        }

    }

## Fields
#foreach ($i in [1..$model.getTupleLength()])
    private final $model.getElementType($i) $model.getElementName($i);

#end
    /**
     * Cache the hash code
     */
    private int hash;

    /**
     * Cache the string representation
     */
    private String str;

## Constructors
    public $className(#args) {
#foreach ($i in [1..$model.getTupleLength()])
        this.$model.getElementName($i) = $model.getElementName($i);
#end
    }

## Getters
#foreach ($i in [1..$model.getTupleLength()])
#set ($fieldName = $model.getElementName($i))
#set ($fieldType = $model.getElementType($i))
#set ($methodName = "get$util.upperCaseFirstChar($fieldName)")
    public $fieldType $methodName() {
        return $fieldName;
    }

#end
## Setters
#foreach ($i in [1..$model.getTupleLength()])
#set ($fieldName = $model.getElementName($i))
#set ($fieldType = $model.getElementType($i))
#set ($methodName = "set$util.upperCaseFirstChar($fieldName)")
#macro(attrs_scope $j)
#if($j != 1)this.#end$model.getElementName(1)#foreach ($k in $rangeExcludingFirst), #if($j != $k)this.#end$model.getElementName($k)#end
#end
    public $className#types $methodName($fieldType $fieldName) {
        return new $className#if ($model.getSourceVersion() < 1.7)#types()#else#if ($model.isGeneric())<>#end#end(#attrs_scope($i));
    }

#end
    @Override
    public int hashCode() {
        if (hash == 0) {
#if ($model.getSourceVersion() >= 1.7)
            hash = Objects.hash(#attrs);
#else
            hash = Arrays.hashCode(new Object[] {#attrs});
#end
        }
        return hash;
    }

#if ($model.getSourceVersion() < 1.7)
    private static boolean equals(Object obj1, Object obj2) {
        if (obj1 == null && obj2 == null) {
            return true;
        } else if (obj1 != null && obj2 != null) {
            return obj1.equals(obj2);
        } else {
            return false;
        }
    }

#end
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof $className) {
            $className other = ($className) obj;
#if ($model.getSourceVersion() >= 1.7)
            return Objects.equals(this.$model.getElementName(1), other.$model.getElementName(1))#foreach ($i in $rangeExcludingFirst) && Objects.equals(this.$model.getElementName($i), other.$model.getElementName($i))#end;
#else
            return equals(this.$model.getElementName(1), other.$model.getElementName(1))#foreach ($i in $rangeExcludingFirst) && equals(this.$model.getElementName($i), other.$model.getElementName($i))#end;
#end
        } else {
            return false;
        }
    }

    @Override
    public Iterator<Object> iterator() {
        return new $iteratorClassName();
    }

    @Override
    public String toString() {
        if (str == null) {
            str = new StringBuilder("(")
                .append($model.getElementName(1))
#foreach ($i in $rangeExcludingFirst)
                .append(", ").append($model.getElementName($i))
#end
                .append(")").toString();
        }
        return str;
    }

## Static factory
    public static #types $className#types create(#args) {
        return new $className#if ($model.getSourceVersion() < 1.7)#types()#else#if ($model.isGeneric())<>#end#end(#attrs);
    }

}
